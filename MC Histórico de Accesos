/**
 * ==================================================
 * MICROSERVICIO: HIST√ìRICO DE ACCESOS
 * Registra cada evento importante del sistema en una hoja de auditor√≠a.
 * ==================================================
 */

var CONFIG_HISTORICO = {
  NOMBRE_HOJA: "Hist√≥ricoAccesos"
};

/**
 * üéØ Inicializa la hoja de hist√≥rico (si no existe)
 * @returns {Sheet} La hoja de hist√≥rico
 */
function inicializarHojaHistorico() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var hoja = ss.getSheetByName(CONFIG_HISTORICO.NOMBRE_HOJA);
  
  if (!hoja) {
    Logger.log("üìã Creando hoja de hist√≥rico...");
    hoja = ss.insertSheet(CONFIG_HISTORICO.NOMBRE_HOJA);
    
    // Configurar headers
    hoja.getRange("A1:H1").setValues([[
      "Timestamp",
      "Usuario",
      "C√©dula", 
      "Email",
      "√Årea",
      "Sandbox",
      "Acci√≥n",
      "Detalles"
    ]]);
    
    // Formatear headers
    hoja.getRange("A1:H1").setFontWeight("bold");
    hoja.setFrozenRows(1);
    hoja.autoResizeColumns(1, 8);
    
    Logger.log("‚úÖ Hoja de hist√≥rico creada: " + CONFIG_HISTORICO.NOMBRE_HOJA);
  }
  
  return hoja;
}

/**
 * üìù Registra un evento en el hist√≥rico (Funci√≥n principal del MC)
 * @param {Object} datosUsuario - Informaci√≥n del usuario {nombre, cedula, email, area, sandbox}
 * @param {String} accion - Tipo de acci√≥n (CREACI√ìN, RENOVACI√ìN, VENCIMIENTO, REVOCADO, NOTIFICACI√ìN)
 * @param {String} detalles - Texto adicional con contexto o observaciones
 * @returns {Boolean} True si se registr√≥ exitosamente
 */
function MC_RegistrarEnHistorico(datosUsuario, accion, detalles) {
  try {
    Logger.log("üìù Registrando evento en hist√≥rico: " + accion);
    
    var hoja = inicializarHojaHistorico();
    var ultimaFila = hoja.getLastRow() + 1;
    
    // Preparar datos para insertar
    var nuevoRegistro = [
      new Date(), // Timestamp
      datosUsuario.nombre || "N/A",
      datosUsuario.cedula || "N/A", 
      datosUsuario.email || "N/A",
      datosUsuario.area || "N/A",
      datosUsuario.sandbox || "N/A",
      accion,
      detalles || ""
    ];
    
    // Insertar en la hoja
    hoja.getRange(ultimaFila, 1, 1, 8).setValues([nuevoRegistro]);
    
    Logger.log("‚úÖ Evento registrado: " + accion + " - " + datosUsuario.nombre);
    return true;
    
  } catch (e) {
    Logger.log("‚ùå Error registrando en hist√≥rico: " + e.toString());
    return false;
  }
}

/**
 * üß™ FUNCI√ìN DE PRUEBA del MC
 * Simula diferentes eventos para verificar el funcionamiento
 */
function MC_PruebaHistorico() {
  Logger.log("üß™ Iniciando prueba del MC de Hist√≥rico...");
  
  // Datos de prueba
  var usuarioEjemplo = {
    nombre: "Ana Torres",
    cedula: "123456789", 
    email: "ana.torres@empresa.com",
    area: "Ciberseguridad",
    sandbox: "CYBER"
  };
  
  // Simular diferentes eventos
  MC_RegistrarEnHistorico(usuarioEjemplo, "CREACI√ìN", "Carta responsiva inicial generada con vigencia de 6 meses.");
  
  MC_RegistrarEnHistorico(usuarioEjemplo, "NOTIFICACI√ìN", "Primer recordatorio enviado (30 d√≠as antes del vencimiento).");
  
  MC_RegistrarEnHistorico(usuarioEjemplo, "RENOVACI√ìN", "Usuario renov√≥ acceso con nueva carta responsiva.");
  
  MC_RegistrarEnHistorico(usuarioEjemplo, "VENCIMIENTO", "Acceso vencido por falta de renovaci√≥n.");
  
  Logger.log("‚úÖ Prueba completada. Revisa la hoja '" + CONFIG_HISTORICO.NOMBRE_HOJA + "'");
}

/**
 * üìä Obtener estad√≠sticas del hist√≥rico
 * @returns {Object} Conteo de eventos por tipo
 */
function MC_ObtenerEstadisticasHistorico() {
  try {
    var hoja = inicializarHojaHistorico();
    var datos = hoja.getDataRange().getValues();
    
    // Contar eventos por tipo (omitir header)
    var conteo = {};
    for (var i = 1; i < datos.length; i++) {
      var accion = datos[i][6]; // Columna G: Acci√≥n
      if (accion) {
        conteo[accion] = (conteo[accion] || 0) + 1;
      }
    }
    
    Logger.log("üìä Estad√≠sticas del hist√≥rico: " + JSON.stringify(conteo));
    return conteo;
    
  } catch (e) {
    Logger.log("‚ùå Error obteniendo estad√≠sticas: " + e.toString());
    return {};
  }
}